{"version":3,"sources":["helpers/api.ts","components/PeopleTable.tsx","App.tsx","index.tsx"],"names":["getPeople","fetch","then","response","json","PeopleTable","currentPerson","useState","people","setPeople","useEffect","res","map","person","i","id","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","get","currentQuery","setCurrentQuery","updateQuery","useCallback","debounce","value","push","visiblePeople","useMemo","filter","name","fatherName","motherName","toLowerCase","includes","sortBy","sortedPeople","setSortedPeople","sort","a","b","localeCompare","className","type","placeholder","onChange","e","target","set","trim","delete","toString","item","key","onClick","reverse","clickHandler","slug","pathname","cn","person__active","to","person__woman","sex","person__man","born","died","App","exact","activeClassName","path","render","match","params","personName","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.59013a45.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\n\nconst getPeople = (): Promise<Person[]> => {\n  return fetch(API_URL)\n    .then(response => response.json());\n};\n\nexport default getPeople;\n","import React, {\n  useEffect,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport cn from 'classnames';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport debounce from 'lodash.debounce';\nimport getPeople from '../helpers/api';\n\ntype Props = {\n  currentPerson: string;\n};\n\nconst PeopleTable: React.FC<Props> = ({ currentPerson }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then(res => setPeople(\n        res.map((person, i) => ({\n          ...person,\n          id: i + 1,\n        })),\n      ));\n  }, []);\n\n  const tableHeads = [\n    'Name',\n    'Sex',\n    'Born',\n    'Died',\n    'Mother',\n    'Father',\n  ];\n\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const search = searchParams.get('query') || '';\n  const [currentQuery, setCurrentQuery] = useState(search);\n\n  const updateQuery = useCallback(\n    debounce((value: string) => {\n      history.push({ search: value });\n    }, 1000),\n    [],\n  );\n\n  const visiblePeople = useMemo(() => {\n    return people.filter(person => (\n      (person.name + person.fatherName + person.motherName)\n        .toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [people, search]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setCurrentQuery(value);\n    searchParams.set('query', value);\n\n    if (!(searchParams.get('query') || '').trim()) {\n      searchParams.delete('query');\n    }\n\n    updateQuery(searchParams.toString());\n  };\n\n  useEffect(() => {\n    setCurrentQuery(search);\n  }, [search]);\n\n  const sortBy = searchParams.get('sortBy') || '';\n  const [sortedPeople, setSortedPeople] = useState<Person[]>([...people]);\n\n  useEffect(() => {\n    setSortedPeople([...visiblePeople]);\n  }, [visiblePeople]);\n\n  useMemo(() => {\n    switch (sortBy) {\n      case 'id':\n      case 'died':\n      case 'born':\n        sortedPeople.sort((a, b) => (a[sortBy] - b[sortBy]));\n        break;\n      case 'name':\n      case 'sex':\n      case 'fatherName':\n      case 'motherName':\n        sortedPeople.sort((a, b) => (a[sortBy].localeCompare(b[sortBy])));\n        break;\n      default:\n        break;\n    }\n  }, [sortedPeople, sortBy]);\n\n  const clickHandler = (item: string) => {\n    if (searchParams.get('sortBy') === item\n      && searchParams.get('sortOrder') === 'asc') {\n      searchParams.set('sortOrder', 'desc');\n      sortedPeople.reverse();\n    } else {\n      searchParams.set('sortOrder', 'asc');\n      sortedPeople.reverse();\n    }\n\n    searchParams.set('sortBy', item);\n\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const handleChangePath = (e: string) => {\n    history.push({\n      pathname: `/people/${e}`,\n      search: searchParams.toString(),\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <h2 className=\"page__title\">\n        People page\n      </h2>\n      <input\n        type=\"text\"\n        value={currentQuery}\n        placeholder=\"Type to search people\"\n        onChange={handleChange}\n        className=\"searh-input\"\n      />\n      <table className=\"people-table\">\n        <thead className=\"people-table__prop\">\n          <tr>\n            {tableHeads.map(item => (\n              <th\n                className=\"people-table__prop\"\n                key={item}\n                onClick={() => clickHandler(item)}\n              >\n                {item}\n                {sortBy === item && '*'}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"people-table__prop\">\n          {sortedPeople.map(person => (\n            <tr\n              key={person.id}\n              onClick={() => handleChangePath(person.slug)}\n            >\n              <td className=\"people-table__prop\">\n                <Link\n                  className={cn({\n                    person: true,\n                    person__active: currentPerson === person.slug,\n                  })}\n                  to={`/people/${person.slug}`}\n                >\n                  {person.name}\n                </Link>\n              </td>\n              <td\n                className={cn({\n                  person__woman: person.sex === 'f',\n                  person__man: person.sex === 'm',\n                })}\n              >\n                {person.sex}\n              </td>\n              <td className=\"people-table__prop\">\n                {person.born}\n              </td>\n              <td className=\"people-table__prop\">\n                {person.died}\n              </td>\n              <td className=\"people-table__prop\">\n                <Link\n                  to={`/people/:${person.slug}`}\n                  className=\"person\"\n                >\n                  {person.motherName}\n                </Link>\n              </td>\n              <td className=\"people-table__prop\">\n                <Link\n                  to={`/people/:${person.slug}`}\n                  className=\"person\"\n                >\n                  {person.fatherName}\n                </Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PeopleTable;\n","import React from 'react';\n\nimport {\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\n\nimport './App.css';\nimport PeopleTable from './components/PeopleTable';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"header\">\n      <h1 className=\"header__title\">Tabs with router</h1>\n      <nav className=\"nav\">\n        <ul className=\"nav__list\">\n          <li className=\"nav__item\">\n            <NavLink\n              className=\"nav__link\"\n              to=\"/\"\n              exact\n              activeClassName=\"nav__link--active\"\n            >\n              HomePage\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              className=\"nav__link\"\n              to=\"/people\"\n              activeClassName=\"nav__link--active\"\n            >\n              PeoplePage\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n    <Switch>\n      <Route path=\"/\" exact>\n        <div className=\"page\">\n          <h2 className=\"page__title\">\n            Home page\n          </h2>\n        </div>\n      </Route>\n      <Route\n        path=\"/people/:personName?\"\n        render={({ match }) => (\n          <PeopleTable currentPerson={match.params.personName} />\n        )}\n      />\n      <Redirect from=\"/home\" to=\"/\" />\n      <Route>\n        <h1>Page not found</h1>\n      </Route>\n    </Switch>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}